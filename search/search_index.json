{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"<p>The Instance Metadata Service (IMDS) stores data about an EC2 that you can use to configure or manage the running of that instance. Data is made accessible through the use of instance categories that adapt to its current state. Designing and developing software around the IMDS service poses two main challenges:</p> <ol> <li>First and foremost, an EC2 instance is needed; increasing costs</li> <li>There is no way to influence the IMDS service to simulate EC2 events such as spot termination</li> </ol> <p>Both of which make testing difficult and unattainable.</p>","title":"Instance Metadata Service Mock"},{"location":"#so-why-use-a-mock","text":"<p>The <code>imds-mock</code> attempts to solve these problems by providing a tool to accurately simulate any use case within the IMDS service, bringing testing to the forefront without additional cost.</p>","title":"So why use a Mock?"},{"location":"#features","text":"<ul> <li>All mock responses accurately reflect those from the actual IMDS service</li> <li>Customisation of responses is supported through CLI flags</li> <li>Support for both IMDSv1 and IMDSv2, with strict IMDSv2 possible</li> <li>An in-built eventing system makes the simulation of spot interruption notices both easy and configurable</li> </ul>","title":"Features"},{"location":"install/","text":"<p>There are many different ways to install imds-mock. You can install the binary using either a supported package manager, manually, or by compiling the source yourself. Or you can pull a prebuilt image using Docker.</p>","title":"Install"},{"location":"install/#installing-the-binary","text":"","title":"Installing the binary"},{"location":"install/#homebrew","text":"<p>To use Homebrew:</p> <pre><code>brew install purpleclay/tap/imds-mock\n</code></pre>","title":"Homebrew"},{"location":"install/#apt","text":"<p>To install using the apt package manager:</p> <pre><code>echo 'deb [trusted=yes] https://fury.purpleclay.dev/apt/ /' | sudo tee /etc/apt/sources.list.d/purpleclay.list\nsudo apt update\nsudo apt install -y imds-mock\n</code></pre> <p>You may need to install the <code>ca-certificates</code> package if you encounter trust issues with regards to the gemfury certificate:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install -y ca-certificates\n</code></pre>","title":"Apt"},{"location":"install/#yum","text":"<p>To install using the yum package manager:</p> <pre><code>echo '[purpleclay]\nname=purpleclay\nbaseurl=https://fury.purpleclay.dev/yum/\nenabled=1\ngpgcheck=0' | sudo tee /etc/yum.repos.d/purpleclay.repo\nsudo yum install -y imds-mock\n</code></pre>","title":"Yum"},{"location":"install/#aur","text":"<p>To install from the aur using yay:</p> <pre><code>yay -S imds-mock-bin\n</code></pre>","title":"Aur"},{"location":"install/#linux-packages","text":"<p>Download and manually install one of the <code>.deb</code>, <code>.rpm</code> or <code>.apk</code> packages from the Releases page.</p> AptYumApk   <pre><code>sudo apt install imds-mock_*.deb\n</code></pre>   <pre><code>sudo yum localinstall imds-mock_*.rpm\n</code></pre>   <pre><code>sudo apk add --no-cache --allow-untrusted imds-mock_*.apk\n</code></pre>","title":"Linux Packages"},{"location":"install/#go-install","text":"<pre><code>go install github.com/purpleclay/imds-mock@latest\n</code></pre>","title":"Go Install"},{"location":"install/#bash-script","text":"<p>To install the latest version using a bash script:</p> <pre><code>curl https://raw.githubusercontent.com/purpleclay/imds-mock/main/scripts/install | bash\n</code></pre> <p>A specific version can be downloaded by using the <code>-v</code> flag. By default the script uses <code>sudo</code>, which can be turned off by using the <code>--no-sudo</code> flag.</p> <pre><code>curl https://raw.githubusercontent.com/purpleclay/imds-mock/main/scripts/install | bash -s -- -v v0.1.0 --no-sudo\n</code></pre>","title":"Bash Script"},{"location":"install/#manually","text":"<p>Binary downloads of imds-mock can be found on the Releases page. Unpack the imds-mock binary and add it to your <code>PATH</code>.</p>","title":"Manually"},{"location":"install/#compiling-from-source","text":"<p>imds-mock is written using Go 1.18+ and should be installed along with go-task, as it is preferred over using make.</p> <p>Then clone the code from GitHub:</p> <pre><code>git clone https://github.com/purpleclay/imds-mock.git\ncd imds-mock\n</code></pre> <p>Build imds-mock:</p> <pre><code>task\n</code></pre> <p>And check that everything works:</p> <pre><code>./imds-mock version\n</code></pre>","title":"Compiling from source"},{"location":"install/#running-with-docker","text":"<p>You can run imds-mock directly from a docker image.</p> DockerHubGHCR   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock\n</code></pre>","title":"Running with Docker"},{"location":"install/#verifying-artefacts","text":"<p>All verification is carried out using cosign and it must be installed before proceeding.</p>","title":"Verifying Artefacts"},{"location":"install/#binaries","text":"<p>All binaries can be verified using the checksum file, which has been signed using cosign.</p> <ol> <li>Download the checksum files that need to be verified:</li> </ol> <pre><code>curl -sL https://github.com/purpleclay/imds-mock/releases/download/v0.1.0/checksums.txt -O\ncurl -sL https://github.com/purpleclay/imds-mock/releases/download/v0.1.0/checksums.txt.sig -O\ncurl -sL https://github.com/purpleclay/imds-mock/releases/download/v0.1.0/checksums.txt.pem -O\n</code></pre> <ol> <li>Verify the signature of the checksum file:</li> </ol> <pre><code>cosign verify-blob --cert checksums.txt.pem --signature checksums.txt.sig checksums.txt\n</code></pre> <ol> <li>Download any release artefact and verify its SHA256 signature matches the entry within the checksum file:</li> </ol> <pre><code>sha256sum --ignore-missing -c checksums.txt\n</code></pre>  <p>Don't mix versions</p> <p>For checksum verification to work, all artefacts must be downloaded from the same release</p>","title":"Binaries"},{"location":"install/#docker","text":"<p>Docker images can be verified using cosign directly, as the signature will be embedded within the docker manifest.</p> DockerHubGHCR   <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify purpleclay/imds-mock\n</code></pre>   <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify ghcr.io/purpleclay/imds-mock\n</code></pre>","title":"Docker"},{"location":"configure/imdsv2/","text":"<p>IMDSv2 uses session-orientated requests, prohibiting access to any endpoints on the imds-mock without using a session token. A client must request a token with a maximum TTL of between one second and six hours before further requests.</p> <p>It is good security practice to only support IMDSv21 when launching an EC2. Enable the <code>--imdsv2</code> flag to simulate this behaviour.</p>","title":"IMDSv2"},{"location":"configure/imdsv2/#enforce-strict-imdsv2","text":"CLIDockerHubGHCR   <pre><code>imds-mock --imdsv2\n</code></pre>   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock --imdsv2\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock --imdsv2\n</code></pre>","title":"Enforce Strict IMDSv2"},{"location":"configure/imdsv2/#using-a-session-token","text":"<ol> <li>Request a session token by providing the <code>X-aws-ec2-metadata-token-ttl-seconds</code> header with a value between <code>1</code> and <code>21600</code> seconds (six hours):    <pre><code>TOKEN=`curl -X PUT \"http://localhost:1338/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`\n</code></pre></li> <li>Include the token in any subsequent requests by providing the <code>X-aws-ec2-metadata-token</code> header:    <pre><code>curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -v http://localhost:1338/latest/meta-data/\n</code></pre></li> </ol>   <ol> <li> <p>The AWS Security blog post, Add defense in depth against open firewalls, reverse proxies, and SSRF vulnerabilities with enhancements to the EC2 Instance Metadata Service, details why using IMDSv2 is important to EC2 security\u00a0\u21a9</p> </li> </ol>","title":"Using a Session Token"},{"location":"configure/instance-tags/","text":"<p>EC2 instance tags can be exposed through the AWS Instance Metadata Service through the <code>tags/instance</code> instance category. The imds-mock exposes a default <code>Name=imds-mock-ec2</code> tag to simulate the enablement of this feature.</p>","title":"Instance Tags"},{"location":"configure/instance-tags/#custom-tags","text":"<p>If you wish to override the default instance tags exposed by the imds-mock, the <code>--instance-tags</code> flag accepts a list of <code>key=value</code> pairs.</p> CLIDockerHubGHCR   <pre><code>imds-mock --instance-tags Name=Test,Environment=Dev\n</code></pre>   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock --instance-tags Name=Test,Environment=Dev\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock --instance-tags Name=Test,Environment=Dev\n</code></pre>","title":"Custom Tags"},{"location":"configure/instance-tags/#querying-a-tag","text":"<p>Any custom tag can be retrieved using the root metadata category <code>tags/instance</code>. For example, to retrieve the <code>Environment</code> tag:</p> <pre><code>curl http://localhost:1338/latest/meta-data/tags/instance/Environment\n</code></pre>","title":"Querying a Tag"},{"location":"configure/instance-tags/#excluding-instance-tags","text":"<p>EC2 instance tags are omitted from the AWS Instance Metadata Service by default. Set the <code>--exclude-instance-tags</code> flag to simulate this in the imds-mock:</p> CLIDockerHubGHCR   <pre><code>imds-mock --exclude-instance-tags\n</code></pre>   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock --exclude-instance-tags\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock --exclude-instance-tags\n</code></pre>","title":"Excluding Instance Tags"},{"location":"configure/on-demand/","text":"<p>The imds-mock simulates an on-demand instance by default. Once the mock has started, all supported instance categories1 will be available for querying via both IMDSv1 and IMDSv2.</p> CLIDockerHubGHCR   <pre><code>imds-mock\n</code></pre>   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock\n</code></pre>      <ol> <li> <p>A list of currently supported instance categories can be found here \u21a9</p> </li> </ol>","title":"On-Demand Instance"},{"location":"configure/spot/","text":"<p>The imds-mock can simulate a spot instance. A spot instance is more cost-effective than an on-demand instance but is at the mercy of spot interruptions. An interruption notice will typically be issued by Amazon EC2 two minutes before it stops or terminates your spot instance, with no warning issued before hibernation.</p>","title":"Spot Instance"},{"location":"configure/spot/#switching-instance-type","text":"<p>Set the <code>--spot</code> flag to enable spot simulation within the imds-mock. The <code>spot/instance-action</code> metadata category will immediately be available and will return an interruption notice to terminate the instance.</p> CLIDockerHubGHCR   <pre><code>imds-mock --spot\n</code></pre>   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock --spot\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock --spot\n</code></pre>","title":"Switching Instance Type"},{"location":"configure/spot/#configure-interruption-notice","text":"<p>You have complete control over the spot interruption notice raised by the imds-mock. Set the <code>--spot-action</code> flag, specifying the interruption type (<code>terminate</code>, <code>stop</code> or <code>hibernate</code>) and an initial delay to raise a spot interruption notice.</p> CLIDockerHubGHCR   <pre><code>imds-mock --spot --spot-action stop=10s\n</code></pre>   <pre><code>docker run -p 1338:1338 purpleclay/imds-mock --spot --spot-action stop=10s\n</code></pre>   <pre><code>docker run -p 1338:1338 ghcr.io/purpleclay/imds-mock --spot --spot-action stop=10s\n</code></pre>     <p>Handling hibernation a little differently</p> <p>A hibernate interruption notice does not provide a two-minute warning and is effective immediately. It, therefore, should not be accessible through the <code>spot/instance-action</code> metadata category. However, as the mock will remain running, this category will be available and contain details of the hibernation interruption.</p>","title":"Configure Interruption Notice"},{"location":"reference/cli/","text":"<p>Mocks the Amazon Instance Metadata Service (IMDS) for EC2.</p>","title":"Command Line"},{"location":"reference/cli/#usage","text":"<pre><code>imds-mock [flags]\nimds-mock [command]\n</code></pre>","title":"Usage"},{"location":"reference/cli/#flags","text":"<pre><code>    --exclude-instance-tags          exclude access to instance tags associated with the instance\n-h, --help                           help for imds-mock\n    --imdsv2                         enforce IMDSv2 requiring all requests to contain a valid metadata token\n    --instance-tags stringToString   a list of instance tags (key pairs) to expose as metadata (default [Name=imds-mock-ec2])\n    --port int                       the port to be used at startup (default 1338)\n    --pretty                         if instance categories should return pretty printed JSON\n    --spot                           enable simulation of a spot instance and interruption notice\n    --spot-action stringToString     configure the type and delay of the spot interruption notice (default terminate=0s)\n</code></pre>","title":"Flags"},{"location":"reference/cli/#commands","text":"<pre><code>completion  Generate a completion script for your target shell\nhelp        Help about any command\nversion     Prints the build time version information\n</code></pre>","title":"Commands"},{"location":"reference/instance-metadata/","text":"<p>The Instance Metadata Service divides metadata into categories1. Clients must include the categories path within a request when retrieving instance metadata.</p> <p>The <code>imds-mock</code> offers different levels of support for each of the instance categories. Please consult this table with each future release.</p>  <p>Table Key</p> <p>This is a living table and will change as new features are released. In the meantime, the following key highlights the level of support for each metadata category.</p> <ul> <li>: fully supported</li> <li>: partially supported, future enhancements planned</li> <li>: not currently supported</li> </ul>","title":"Instance Metadata Categories"},{"location":"reference/instance-metadata/#categories","text":"<p>The following table lists the categories of instance metadata. Highlighted text within a category denotes a dynamic placeholder.</p>    Category Supported     <code>ami-id</code>  <code>v0.1.0</code>   <code>ami-launch-index</code>  <code>v0.1.0</code>   <code>ami-manifest-path</code>    <code>ancestor-ami-ids</code>    <code>autoscaling/target-lifecycle-state</code>    <code>block-device-mapping/ami</code>  <code>v0.1.0</code>   <code>block-device-mapping/ebsN</code>  <code>v0.1.0</code>   <code>block-device-mapping/ephemeralN</code>    <code>block-device-mapping/root</code>  <code>v0.1.0</code>   <code>block-device-mapping/swap</code>    <code>elastic-gpus/associations/elastic-gpu-id</code>    <code>elastic-inference/associations/eia-id</code>    <code>events/maintenance/history</code>    <code>events/maintenance/scheduled</code>    <code>events/recommendations/rebalance</code>  <code>v0.3.0</code>   <code>hostname</code>  <code>v0.1.0</code>   <code>iam/info</code>  <code>v0.1.0</code>   <code>iam/security-credentials/role-name</code>  <code>v0.1.0</code>   <code>identity-credentials/ec2/info</code>    <code>identity-credentials/ec2/security-credentials/ec2-instance</code>    <code>instance-action</code>  <code>v0.1.0</code>   <code>instance-id</code>  <code>v0.1.0</code>   <code>instance-life-cycle</code>  <code>v0.1.0</code>   <code>instance-type</code>  <code>v0.1.0</code>   <code>ipv6</code>    <code>kernel-id</code>    <code>local-hostname</code>  <code>v0.1.0</code>   <code>local-ipv4</code>  <code>v0.1.0</code>   <code>mac</code>  <code>v0.1.0</code>   <code>metrics/vhostmd</code>    <code>network/interfaces/macs/mac/device-number</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/interface-id</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/ipv4-associations/public-ip</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/ipv6s</code>    <code>network/interfaces/macs/mac/local-hostname</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/local-ipv4s</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/mac</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/network-card-index</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/owner-id</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/public-hostname</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/public-ipv4s</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/security-groups</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/security-group-ids</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/subnet-id</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/subnet-ipv4-cidr-block</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/subnet-ipv6-cidr-blocks</code>    <code>network/interfaces/macs/mac/vpc-id</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/vpc-ipv4-cidr-block</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/vpc-ipv4-cidr-blocks</code>  <code>v0.1.0</code>   <code>network/interfaces/macs/mac/vpc-ipv6-cidr-blocks</code>  <code>v0.1.0</code>   <code>placement/availability-zone</code>  <code>v0.1.0</code>   <code>placement/availability-zone-id</code>  <code>v0.1.0</code>   <code>placement/group-name</code>  <code>v0.1.0</code>   <code>placement/host-id</code>  <code>v0.1.0</code>   <code>placement/partition-number</code>  <code>v0.1.0</code>   <code>placement/region</code>  <code>v0.1.0</code>   <code>product-codes</code>  <code>v0.1.0</code>   <code>public-hostname</code>  <code>v0.1.0</code>   <code>public-ipv4</code>  <code>v0.1.0</code>   <code>public-keys/0/openssh-key</code>  <code>v0.1.0</code>   <code>ramdisk-id</code>    <code>reservation-id</code>  <code>v0.1.0</code>   <code>security-groups</code>  <code>v0.1.0</code>   <code>services/domain</code>  <code>v0.1.0</code>   <code>services/partition</code>  <code>v0.1.0</code>   <code>spot/instance-action</code>  <code>v0.3.0</code>   <code>spot/termination-time</code>  <code>v0.3.0</code>   <code>tags/instance</code>  <code>v0.2.0</code>","title":"Categories"},{"location":"reference/instance-metadata/#dynamic-categories","text":"<p>The following table lists the categories of dynamic data.</p>    Category Supported     <code>fws/instance-monitoring</code>    <code>instance-identity/document</code>    <code>instance-identity/pkcs7</code>    <code>instance-identity/signature</code>       <ol> <li> <p>View the official AWS documentation with regards to instance metadata categories here.\u00a0\u21a9</p> </li> </ol>","title":"Dynamic Categories"}]}